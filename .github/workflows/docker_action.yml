# docker_action.yml
name: Docker-ubuntu-build

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'releases/**'
      - 'latest-tf'
    tags:
      - '*'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'releases/**'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}  
  DO_SIGNING: ${{ false }}
  DOCKER_BUILDKIT: 0
  BRANCH: ${{ github.ref.name }}  # 'latest-tf' or 'develop'
  CONTAINER_NAME : gha_${{ github.ref.name }} 
  DOCKER_RUN: docker run --name gha_${{ github.ref.name }}  --rm --gpus all --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 

jobs:
  build:
    name: docker_image_build
    runs-on: self-hosted
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      # - name: Extract branch name
      #   shell: bash
      #   run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      #   id: extract_branch

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get all test, doc, yml, and src files that have changed
        id: changed-files-yaml
        uses: tj-actions/changed-files@v40
        with:
          files_yaml: |
            doc:
              - '**.md'
              - docs/**
              - README.md
            test:
              - tests/**
              - '!tests/**.md'
            src:
              - src/**
            conda-ymls:
              - '*.yml'
            anybody:
              - '**'

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files-yaml.outputs.anybody_all_changed_files }}; do
            echo "$file was changed"
          done

      - name: Checkout just Dockerfile
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
             Dockerfile
          sparse-checkout-cone-mode: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker 

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}    # aka ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=OpticalNet_ubuntu
            org.opencontainers.image.description=Docker image for a transformer network to perform sensorless detection of aberrations in adaptive optics. https://github.com/abcucberkeley/opticalaberrations
            org.opencontainers.image.vendor=Advanced Bioimaging Center at UC Berkeley and Janelia Research Campus

      - name: Build and load Docker image. Use local cache.
        run: |
          DOCKER_BUILDKIT=0 docker build . --build-arg BRANCH_NAME=${{ env.BRANCH }} --tag ${{ steps.meta.outputs.tags }}

        # uses: docker/build-push-action@v5
        # with:
        #   context: .
        #   file: ./Dockerfile
        #   push: false
        #   tags: ${{ steps.meta.outputs.tags }}
        #   labels: ${{ steps.meta.outputs.labels }}
        #   no-cache: true
        #   load: true
        #   build-args: |
        #     BRANCH_NAME=${{ steps.extract_branch.outputs.branch }}

      - name: Remove old container if it exists
        continue-on-error: true
        run: docker rm --name ${{ env.CONTAINER_NAME }}
          
      - name: Test NVIDIA-SMI
        run: docker run --name ${{ env.CONTAINER_NAME }} --rm --gpus all ${{ steps.meta.outputs.tags }} nvidia-smi

      - name: conda list -n ml
        run: docker run --name ${{ env.CONTAINER_NAME }} --rm --gpus all ${{ steps.meta.outputs.tags }} "conda list -n ml"
              
      - name: Test TensorFlow
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_tensorflow.py"

      - name: Test IO
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_io.py"

      - name: Test preprocessing
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_preprocessing.py"

      - name: Test embeddings
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_embeddings.py"

      - name: Test AO
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_ao.py"

      - name: Test synthetic datasets
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_datasets.py"
          
      - name: Test training
        continue-on-error: true
        run: ${{ env.DOCKER_RUN }} ${{ steps.meta.outputs.tags }} "~/miniconda3/envs/ml/bin/python -m pytest -vvv --color=yes --disable-warnings tests/test_train.py"

      - name: Build and push Docker image
        id: build-and-push
        run: docker image push ${{ steps.meta.outputs.tags }}

        # uses: docker/build-push-action@v5
        # env:
        #   DOCKER_BUILDKIT: 0
        # with:
        #   context: .
        #   file: ./Dockerfile
        #   push: ${{ github.event_name != 'pull_request' }}
        #   tags: ${{ steps.meta.outputs.tags }}
        #   labels: ${{ steps.meta.outputs.labels }}
        #   build-args: |
        #     BRANCH_NAME=${{ steps.extract_branch.outputs.branch }}         