# docker_action.yml
name: Docker-ubuntu-build

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'releases/**'
      - 'latest-tf'
    tags:
      - '*'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'releases/**'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}  
  DO_SIGNING: ${{ false }}
  BRANCH: ${{ github.head_ref || github.ref_name }}   # 'latest-tf' or 'develop'
  CONTAINER_NAME : gha_${{ github.head_ref || github.ref_name }}   # 'latest-tf' or 'develop' 
  DOCKER_RUN: docker run --name gha_$(git branch --show-current) --rm --gpus all --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 

jobs:
  build:      
    name: docker_image_build
    runs-on: self-hosted
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"
          
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout single file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Dockerfile
          sparse-checkout-cone-mode: false
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker 

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}    # aka ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=OpticalNet_ubuntu
            org.opencontainers.image.description=Docker image for a transformer network to perform sensorless detection of aberrations in adaptive optics. https://github.com/abcucberkeley/opticalaberrations
            org.opencontainers.image.vendor=Advanced Bioimaging Center at UC Berkeley and Janelia Research Campus

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5        
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BRANCH_NAME=${{ env.BRANCH }}    
        
  container-test-job:
    needs: build
    if: always()
    runs-on: self-hosted
    container: 
      image: ghcr.io/${{ github.repository }}:${{ github.head_ref || github.ref_name }}   # pull image 'latest-tf' or 'develop'
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      ports:
        - 80
      options: --gpus all --ipc=host  --ulimit memlock=-1  --ulimit stack=67108864
    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout repo in container
        uses: actions/checkout@v4
        with:
          lfs: 'true'
          submodules: 'recursive'

      - name: pip list 
        run: pip list

      - name: Test NVIDIA-SMI
        run:  nvidia-smi
              
      - name: Test TensorFlow
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_tensorflow.py

      - name: Test IO
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_io.py

      - name: Test preprocessing
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_preprocessing.py

      - name: Test embeddings
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_embeddings.py

      - name: Test synthetic datasets
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_datasets.py"

      - name: Test AO  # requires test data generated by previous step: Test synthetic datasets
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_ao.py"
          
      - name: Test training
        continue-on-error: true
        run: python -m pytest -vvv --color=yes --disable-warnings tests/test_train.py"
